import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
} from "react-native";
import React, { useEffect, useState } from "react";
import { useNavigation } from "@react-navigation/native";
import Header from "../../components/header/Header";
import { Picker } from "@react-native-picker/picker";
import {
  readLinesAPI,
  readStartStationsByLineIdAPI,
  readTicketTypeAPI,
} from "../../apis";
import { useSelector } from "react-redux";
import TicketConfirmModal from "../../components/modal/TicketConfirmModal";

const ticketInfoByType = {
  "V√© ng√†y": {
    hsd: "24h k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm k√≠ch ho·∫°t",
    note: "T·ª± ƒë·ªông k√≠ch ho·∫°t sau 30 ng√†y k·ªÉ t·ª´ ng√†y mua v√©",
  },
  "V√© tu·∫ßn": {
    hsd: "7 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm k√≠ch ho·∫°t",
    note: "T·ª± ƒë·ªông k√≠ch ho·∫°t sau 60 ng√†y k·ªÉ t·ª´ ng√†y mua v√©",
  },
  "V√© th√°ng": {
    hsd: "30 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm k√≠ch ho·∫°t",
    note: "T·ª± ƒë·ªông k√≠ch ho·∫°t sau 180 ng√†y k·ªÉ t·ª´ ng√†y mua v√©",
  },
  "V√© nƒÉm": {
    hsd: "365 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm k√≠ch ho·∫°t",
    note: "T·ª± ƒë·ªông k√≠ch ho·∫°t sau 360 ng√†y k·ªÉ t·ª´ ng√†y mua v√©",
  },
  "V√© th√°ng h·ªçc sinh": {
    hsd: "30 ng√†y k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm k√≠ch ho·∫°t",
    note: "T·ª± ƒë·ªông k√≠ch ho·∫°t sau 180 ng√†y k·ªÉ t·ª´ ng√†y mua v√©",
  },
};

const BuyTicket = () => {
  const navigation = useNavigation();
  const [lines, setLines] = useState([]);
  const [stations, setStations] = useState([]);
  const [selectedLineId, setSelectedLineId] = useState(""); // khai b√°o ƒë·ªÉ l·∫•y ƒë∆∞·ª£c lineId ƒë·ªÉ m√† truy·ªÅn xu·ªëng l·∫•y station.
  const selectedLine = lines.find((line) => line.id === selectedLineId);
  // const sortedStations = [...stations].sort((a, b) => b.id - a.id); // s·∫Øp x·∫øp l·∫°i id v√¨ BE ƒë·∫∑t id sai th·ª© t·ª±
  const [ticketTypes, setTicketTypes] = useState([]);
  const { user, isAuthenticated } = useSelector((state) => state.user);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedTicket, setSelectedTicket] = useState(null);

  const openConfirmModal = (ticket) => {
    setSelectedTicket(ticket);
    setModalVisible(true);
  };

  const closeConfirmModal = () => {
    setModalVisible(false);
    setSelectedTicket(null);
  };

  const fetchTicketTypes = async () => {
    try {
      const response = await readTicketTypeAPI();
      if (!response || !response.result.data) {
        console.error("No data received from API");
        return;
      }
      setTicketTypes(response.result.data);
    } catch (error) {
      console.error("Error fetching ticket types:", error);
    }
  };

  useEffect(() => {
    fetchTicketTypes();
  }, []);

  const featuredTicketNames = ["V√© ng√†y", "V√© tu·∫ßn", "V√© th√°ng", "V√© nƒÉm"];
  const featuredTickets = ticketTypes.filter((ticket) =>
    featuredTicketNames.includes(ticket.name)
  );

  const studentTicket = ticketTypes.find(
    (ticket) => ticket.name === "V√© th√°ng h·ªçc sinh"
  );

  const fetchLines = async () => {
    try {
      const response = await readLinesAPI();
      if (!response || !response.result.data) {
        console.error("No data received from API");
        return;
      }
      setLines(response.result.data);
    } catch (error) {
      console.error("Error fetching lines:", error);
    }
  };

  const fetchStations = async (lineId) => {
    try {
      const response = await readStartStationsByLineIdAPI(lineId);
      if (!response || !response.result) {
        console.error("No data received from API");
        return;
      }
      setStations(response.result);
    } catch (error) {
      console.error("Error fetching stations:", error);
    }
  };

  useEffect(() => {
    fetchLines();
  }, []);

  useEffect(() => {
    // Khi lines c√≥ d·ªØ li·ªáu, set selectedLineId v√† fetch stations
    if (lines.length > 0) {
      setSelectedLineId(lines[0].id);
    }
  }, [lines]);

  useEffect(() => {
    // Ki·ªÉm tra n·∫øu c√≥ lineId r th√¨ truy·ªÅn tham s·ªë z√¥ ƒë·ªÉ l·∫•y station
    if (selectedLineId) {
      fetchStations(selectedLineId);
    }
  }, [selectedLineId]);
  return (
    <>
      <ScrollView style={styles.container}>
        <Header name="Mua v√©" />

        {/* Welcome */}
        <View style={styles.welcomeBox}>
          <Text style={styles.welcome}>
            Ch√†o m·ª´ng, {user?.username || "Ng∆∞·ªùi d√πng"}!
          </Text>
          <Text style={styles.subWelcome}>
            B·∫Øt ƒë·∫ßu c√°c tr·∫£i nghi·ªám m·ªõi c√πng Metro nh√©!
          </Text>
        </View>

        {/* N·ªïi b·∫≠t */}
        <Text style={styles.sectionTitle}>üî• N·ªïi b·∫≠t üî•</Text>
        <View style={styles.ticketList}>
          {featuredTickets.map((ticket) => (
            <TouchableOpacity
              key={ticket.id}
              onPress={() => openConfirmModal(ticket)}
            >
              <View style={styles.ticketItem}>
                <Text style={styles.ticketLabel}>{ticket.name}</Text>
                <Text style={styles.ticketPrice}>
                  {ticket.price.toLocaleString("vi-VN")} ƒë
                </Text>
              </View>
            </TouchableOpacity>
          ))}
        </View>

        {/* ∆Øu ƒë√£i H·ªçc sinh Sinh vi√™n */}
        {studentTicket && (
          <>
            <Text style={styles.sectionTitle}>
              ∆Øu ƒë√£i H·ªçc sinh üéí Sinh vi√™n üéì
            </Text>
            <TouchableOpacity onPress={() => openConfirmModal(studentTicket)}>
              <View style={styles.ticketItem}>
                <Text style={styles.ticketLabel}>{studentTicket.name}</Text>
                <Text style={styles.ticketPrice}>
                  {studentTicket.price.toLocaleString("vi-VN")} ƒë
                </Text>
              </View>
            </TouchableOpacity>
          </>
        )}

        <Text style={styles.sectionTitle}>Ch·ªçn tuy·∫øn ƒë∆∞·ªùng:</Text>
        <View style={styles.pickerWrapper}>
          <Picker
            selectedValue={selectedLineId}
            onValueChange={(itemValue) => setSelectedLineId(itemValue)}
            style={styles.picker}
          >
            {lines.map((line) => (
              <Picker.Item key={line.id} label={line.name} value={line.id} />
            ))}
          </Picker>
        </View>
        <Text style={styles.label}>
          ƒê√£ ch·ªçn: {selectedLine ? selectedLine.name : "Ch∆∞a ch·ªçn"}
        </Text>

        {/* Danh s√°ch ga */}
        <View style={{ marginTop: 24, marginBottom: 50 }}>
          {stations.map((station) => (
            <View key={station.id} style={styles.stationRow}>
              <Text style={styles.stationText}>ƒêi t·ª´ ga {station.name}</Text>
              <TouchableOpacity
                onPress={() =>
                  navigation.navigate("BuyTurnTicket", {
                    // Truy·ªÅn params ·ªü ƒë√¢y
                    lineId: selectedLineId,
                    stationId: station.id,
                    stationName: station.name, // Truy·ªÅn th√™m t√™n ga ƒë·ªÉ hi·ªÉn th·ªã tr√™n header
                  })
                }
              >
                <Text style={styles.detailText}>Xem chi ti·∫øt</Text>
              </TouchableOpacity>
            </View>
          ))}
        </View>
      </ScrollView>

      {selectedTicket && (
        <TicketConfirmModal
          visible={modalVisible}
          onClose={closeConfirmModal}
          title={selectedTicket.name}
          infoRows={
            ticketInfoByType[selectedTicket.name]
              ? [
                  { label: "Lo·∫°i v√©: ", value: selectedTicket.name },
                  {
                    label: "HSD: ",
                    value: ticketInfoByType[selectedTicket.name].hsd,
                  },
                  {
                    label: "L∆∞u √Ω: ",
                    value: ticketInfoByType[selectedTicket.name].note,
                    isWarning: true,
                  },
                  {
                    label: "M√¥ t·∫£: ",
                    value: selectedTicket.description,
                  },
                ]
              : []
          }
          price={`${selectedTicket.price.toLocaleString("vi-VN")} ƒë`}
          onBuy={() => {
            setModalVisible(false);
            navigation.navigate("Invoice", {
              ticketTypeId: selectedTicket.id,
              productName: selectedTicket.name,
              price: `${selectedTicket.price.toLocaleString("vi-VN")} ƒë`,
              quantity: 1,
              isDurationTicket: true,
            });
          }}
        />
      )}
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: "#ebf7fa",
    flex: 1,
    paddingHorizontal: 16,
  },
  welcomeBox: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    marginTop: 20,
    elevation: 2,
  },
  welcome: {
    fontWeight: "bold",
    fontSize: 16,
    marginBottom: 4,
  },
  subWelcome: {
    color: "#888",
    fontSize: 14,
  },
  sectionTitle: {
    fontWeight: "bold",
    fontSize: 16,
    marginVertical: 12,
  },
  ticketList: {
    marginBottom: 8,
  },
  ticketItem: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    marginBottom: 10,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    elevation: 1,
  },
  ticketLabel: {
    fontSize: 15,
    fontWeight: "500",
  },
  ticketPrice: {
    fontSize: 15,
    fontWeight: "bold",
    color: "#007aff",
  },
  stationRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 12,
    borderBottomWidth: 0.5,
    borderColor: "#e0e0e0",
  },
  stationText: {
    fontSize: 15,
    color: "#222",
    fontWeight: "bold",
  },
  detailText: {
    color: "#007aff",
    fontWeight: "500",
    fontSize: 14,
  },
  label: {
    marginBottom: 8,
    fontWeight: "bold",
  },
  pickerWrapper: {
    borderRadius: 10,
    overflow: "hidden",
    marginBottom: 12,
    backgroundColor: "white",
  },
  picker: {
    height: 50,
    width: "100%",
  },
});

export default BuyTicket;
